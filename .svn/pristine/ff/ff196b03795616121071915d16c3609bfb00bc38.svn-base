<template>
    <div>
        <headerview :showLeftbtn="false" :showRightbtn="false" title="晨龙 ERP"></headerview>
            <van-row  class="body">
                <van-grid square :border="false" :column-num="3">
                    <van-grid-item
                        v-for="(item,index) in currentMenuList"
                        @click="turnToPage(`${item.data.resLink}`)"
                        :key="index"
                        :text="item.title"
                    >
                    <template slot="icon" >
                        <div>
                        <van-icon size="40" color="#3296fa" :name="item.data.resIcon" >
                             <div class="van-info">{{item.noticeCount}}{{getNotice(index,item.data.resNotice)}}</div>
                        </van-icon>
                        </div>
                    </template>
                    </van-grid-item>
                </van-grid>
                 <!-- <van-cell-group>
                    <van-cell v-for="(item,index) in currentMenuList" :key="index" @click="turnToPage(`${item.data.resLink}`)" :title="item.title" is-link />
                </van-cell-group> -->
                <!-- <div>{{currentMenuList}}</div> -->
            </van-row>
         <footerview></footerview>
    </div>
</template>
<script>
import baseMixin from '@/mixins'
import {mapActions} from 'vuex'
import { getToken, setToken,setLocalStorage,getLocalStorage } from '@/libs/util'
export default {
    name:'main-view',
    mixins:[baseMixin],
    data(){
        return{
            currentToken:'',//当前用户TOKEN,登陆成功后获取
            currentMenuList:[] //当前用户菜单，通过token查询获取
        }
    },
    created(){
        //初始化数据
        // this.currentToken = getToken()
        // if(!this.currentToken){
            
        // }
    },
    mounted(){
        this.$nextTick(()=>{
           this.getCurrentViewMenu()
          //查询用户菜单
          //this.getMenuList() //放到登陸成功后先查詢菜單 ，后做首頁跳轉
        })
      
    },
    methods:{
        //獲取通知信息
        getNotice(index,_url){
           //let _url =dataItem.resNotice
            if(_url.length<10){
               return
            }
            console.log('獲取通知信息'+_url)
            let params ={
                url:_url
            }
            let _self=this
            this.$store.dispatch('getNoticeInfoAction',params).then(res=>{
                  //console.log('獲取通知返回信息'+JSON.stringify(res))
                  if(Number(res.data)>0){
                         console.log('獲取通知返回信息'+JSON.stringify(res))
                     // return res.data+''
                       //_self.currentMenuList[index] = Object.assign({}, _self.currentMenuList[index], res.data)
                  }
            }).catch(err=>{
                 _self.$toast('获取NoticeInfo失败:'+err)
            })
           // return '1'
        },
         //獲取當前頁面的菜單
        getCurrentViewMenu(){
            //debugger
            let allMenu = this.menuList // this.menuList come from mixins
            //let getTypeof = typeof(allMenu) null,array,object返回的都是‘object’
            if(allMenu==null || allMenu.length==0 || allMenu.constructor != Array){
              return
            }
            let afterFilterData = allMenu.filter(item=>{
                    return item.data.resLink=='index' ? true :false
                })
            this.currentMenuList = afterFilterData[0].children
           //  console.log('this.currentViewMenu :'+ JSON.stringify(this.currentViewMenu))
        },
        //导入合并方法，然后可以直接使用，和methods中方法类似，但参数需要查看原始定义方法 = this.$store.dispatch('getMenuByToken_action',params)
        // ...mapActions(['getMenuByToken_action']),
        //查询获取菜单BY TOKEN
        // getMenuList(){
        //     if(this.currentToken=="" || this.currentToken==null){
        //         this.turnToPage('login')
        //         return
        //        // this.$toast('currentToken 为空')
        //     }
        //     let params={
        //        token:this.currentToken
        //     }
        //     let _self =this 
        //     this.getMenuByToken_action(params).then(res=>{
        //       // debugger
        //           _self.currentMenuList =res
        //     }).catch(err=>{
        //         _self.$toast('获取菜单失败:'+err)
        //     })
        // }


    }
}
</script>